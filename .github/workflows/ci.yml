name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mutagen requests

    - name: Install Node.js dependencies
      run: npm ci

    - name: Type check
      run: npm run type-check

    - name: Lint code
      run: npm run lint

    - name: Build Next.js
      run: npm run build

    - name: Test Python scripts
      run: |
        python -c "import mutagen.easyid3; import mutagen.mp3; print('✅ Python imports OK')"
        python -c "import json, sys; print('✅ Python JSON module OK')"

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mutagen requests

    - name: Install Node.js dependencies
      run: npm ci

    - name: Debug - List files
      run: |
        echo "Current directory:"
        dir
        echo "Build directory:"
        dir build
      shell: cmd

    - name: Build application
      run: npm run dist:win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: music-scan-pro-windows
        path: |
          dist/*.exe
          dist/*.msi
        retention-days: 7

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mutagen requests

    - name: Install Node.js dependencies
      run: npm ci

    - name: Build Electron app
      run: npm run dist:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: music-scan-pro-macos
        path: dist/*.dmg
        retention-days: 7

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mutagen requests

    - name: Install Node.js dependencies
      run: npm ci

    - name: Debug - List files
      run: |
        echo "Current directory:"
        ls -la
        echo "Build directory:"
        ls -la build/

    - name: Build Electron app
      run: npm run dist:linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: music-scan-pro-linux
        path: |
          dist/*.AppImage
          dist/*.deb
        retention-days: 7

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build-windows, build-macos, build-linux]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history to check tag ancestry
        
    - name: Check if tag is on main branch
      run: |
        # Fetch main branch to check tag ancestry
        git fetch origin main
        
        # Check if the current tag commit is reachable from main
        if ! git merge-base --is-ancestor HEAD origin/main; then
          echo "❌ Tag is not on main branch. Releases can only be created from main branch."
          echo "Please merge your changes to main first, then create the tag from main."
          exit 1
        fi
        
        echo "✅ Tag is on main branch. Proceeding with release..."

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: music-scan-pro-windows
        path: ./artifacts/windows/

    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: music-scan-pro-macos
        path: ./artifacts/macos/

    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: music-scan-pro-linux
        path: ./artifacts/linux/

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Music Scan Pro ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          ./artifacts/windows/*
          ./artifacts/macos/*
          ./artifacts/linux/*
        body: |
          ## What's New in ${{ steps.get_version.outputs.VERSION }}
          
          🎸 **Music Scan Pro** - Your rock music analysis companion
          
          ### Downloads
          - **Windows**: Download the `.exe` installer
          - **macOS**: Download the `.dmg` package  
          - **Linux**: Download the `.AppImage` or `.deb` package
          
          ### Features
          - 🎵 Scan your music collection
          - 🎸 Analyze with Last.fm integration
          - 📊 Find missing tracks and new releases
          - 📄 Export detailed PDF reports
          - 🎨 Beautiful rock-themed UI
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v1.0.0...${{ steps.get_version.outputs.VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 